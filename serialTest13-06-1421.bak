#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <time.h>
#include <stdlib.h>
#include <stdarg.h>
#include "MQTTClient.h"
#include <lcd.h>
#include <wiringPi.h>
#include <wiringSerial.h>

//USE WIRINGPI PIN NUMBERS
#define LCD_RS  13               //Register select pin
#define LCD_E   18               //Enable Pin
#define LCD_D4  21               //Data pin 4
#define LCD_D5  24               //Data pin 5
#define LCD_D6  26               //Data pin 6
#define LCD_D7  27               //Data pin 7
#define BUTTON_DOWN  25          // PA07
#define BUTTON_UP  23         // PA10
#define BUTTON_ENTER  19         // PA20

#define SIZE_MENU_1 34
#define SIZE_MENU_2 9
#define TURN_BACK (SIZE_MENU_2 - 1)
#define EXIT      availableUnits
#define TWO_SECONDS 2000
#define ANALOG_PIN index == 1
#define MONITORING_ANALOG index == 2
#define MONITORING_ALL (index == (SIZE_MENU_2 - 2))

#define UART_3 "/dev/ttyS3"
#define BAUD_RATE 9600

#define CONSULT     index % 2
#define MONITORING !(CONSULT)
#define MAX_UNITS 32

#define ADDRESS     "tcp://10.0.0.101:1883@@luno*123"
#define CLIENTID    "sbcPublisher"
#define TOPIC       "MQTTNod"
#define PAYLOAD     "0xC0"
#define QOS         1 
#define TIMEOUT     10000L
#define USERNAME	"aluno"
#define PASSWORD	"@luno*123"

int MQTT_RECVD = FALSE;
int MQTT_RECVD_COUNTER = 0;

void sendData(int fd, unsigned char* array, unsigned char pos) {
    serialPutchar(fd, array[pos]);
    delay(2);
}

int getDigitalData(int fd) {
    if(serialDataAvail(fd) > 0) {
        printf("CONSEGUIU LER\n");
        return serialGetchar(fd);
    }
    return -1;
}

// Implementa o timeout
int recvDigitalData(int fd) {
    int digitalData = -1;
    if((digitalData = getDigitalData(fd)) > -1) return digitalData;
    delay(8);
    if((digitalData = getDigitalData(fd)) > -1) return digitalData;
    printf("NAO CONSEGUIU LER\n");
    return digitalData;
}


int reachUnit(int fd, char *str, unsigned char *select, unsigned char *deselect, int unitId) {
    int recvData;
    sendData(fd, select, unitId);
    recvData = recvDigitalData(fd);
    if(recvData > -1) {
        sprintf(str, "Select Unit %d", unitId + 1);
        printf("REACH UNIT\n");
        return 1;
    }
    sendData(fd, deselect, unitId);
    return 0;
}

int bytes2int(int fd) {
    if(serialDataAvail(fd) > 0) {
        int quocient = serialGetchar(fd);
        delay(2);
        int remainder = serialGetchar(fd);
        return (quocient * 10) + remainder;
    }
    return -1;
}

int recvAnalogData(int fd) {
    int analogData = bytes2int(fd);
    if(analogData > -1) return analogData;
    delay(8);
    analogData = bytes2int(fd);
    if(analogData > -1) return analogData;
    return analogData; // -1
}


void refreshPos(int* pos, signed short size) {
    if (*pos < 0) *pos = size - 1;
    else if (*pos == size) *pos = 0;
}

void lcdddPuts(int lcdfd, int time, char *message, ...) {
    lcdClear(lcdfd);
    char buffer[1024];
    va_list args;
    va_start(args, message);
    vsnprintf(buffer, 1023, message, args);
    va_end(args);
    lcdPuts(lcdfd, buffer);
    delay(time);
}

int sendMQTTMessage(MQTTClient_message *pubmsg, MQTTClient* client, MQTTClient_deliveryToken* token, char* payload, char* topic) {
	int msgcode;
    (*pubmsg).payload = payload;
	(*pubmsg).payloadlen = strlen(payload);
	msgcode = MQTTClient_publishMessage(*client, topic, pubmsg, token);
    printf("msgcode -> %d\n", msgcode);
    if(msgcode > 0) return MQTTCLIENT_FAILURE;
    return MQTTCLIENT_SUCCESS;
}

int reachMQTTUnits(MQTTClient_message *pubmsg, MQTTClient* client, MQTTClient_deliveryToken* token, char* MQTTSelectNode, char* MQTTDeselectNode, char* str, int unitId) {
    int msgcode;
    msgcode = sendMQTTMessage(pubmsg, client, token, MQTTSelectNode, TOPIC);
    delay(5);
    if(msgcode == 0) msgcode = sendMQTTMessage(pubmsg, client, token, MQTTDeselectNode, TOPIC);
    if(msgcode == 0) {
        sprintf(str, "Select Unit %d", unitId + 1);
        return 1;
    }
    return -1;
}

volatile MQTTClient_deliveryToken deliveredtoken;
 
void delivered(void *context, MQTTClient_deliveryToken dt)
{
    printf("Message with token value %d delivery confirmed\n", dt);
    deliveredtoken = dt;
}
 
int msgarrvd(void *context, char *topicName, int topicLen, MQTTClient_message *message)
{
    MQTT_RECVD = TRUE;
    MQTT_RECVD_COUNTER++;
    printf("Message arrived\n");
    printf("     topic: %s\n", topicName);
    printf("   message: %.*s\n", message->payloadlen, (char*)message->payload);
    MQTTClient_freeMessage(&message);
    MQTTClient_free(topicName);
    return 1;
}
 
void connlost(void *context, char *cause)
{
    printf("\nConnection lost\n");
    printf("     cause: %s\n", cause);
}

int main() {
    MQTTClient client;
    int rc;
    MQTTClient_deliveryToken token;
    MQTTClient_message pubmsg = MQTTClient_message_initializer;
    pubmsg.qos = QOS;
    pubmsg.retained = 0;
    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;
    conn_opts.keepAliveInterval = 20;
    conn_opts.cleansession = 1;
	conn_opts.username = USERNAME;
	conn_opts.password = PASSWORD;
    MQTTClient_create(&client, ADDRESS, CLIENTID, MQTTCLIENT_PERSISTENCE_NONE, NULL);

    if((rc = MQTTClient_setCallbacks(client, NULL, connlost, msgarrvd, delivered)) != MQTTCLIENT_SUCCESS)
    {
        printf("Failed to set callbacks, return code %d\n", rc);
        exit(EXIT_FAILURE);
    }

    if((rc = MQTTClient_connect(client, &conn_opts)) != MQTTCLIENT_SUCCESS)
    {
        printf("Failed to connect, return code %d\n", rc);
        exit(EXIT_FAILURE);
    }

    if((rc = MQTTClient_subscribe(client, "MQTTSBC", QOS)) != MQTTCLIENT_SUCCESS)
    {
        printf("Failed to subscribe, return code %d\n", rc);
        exit(EXIT_FAILURE);
    }
    
    int buttonDownState;
    int buttonUpState;
    int buttonEnterState;

    int idxMonitoring;
    int lcdfd;
    int uartfd;
    // Guarda o indice da node selecionada
    int selectedNode;
    // Menu ativo no momento
    int meun1Active = TRUE;
    int menu2Active = FALSE;

    int availableUnits = 0;

    int choiceMenu1;
    int choiceMenu2;

    // Guarda os dados provenientes da Node
    int recvData = 0;

    // Variavel para controlar o que vai ser mostrado no Menu
    int index = 0;

    char monitoringLabels[3][10] = { {"D0"}, {"D1"}, {"A0"} };
    char monitoringLabels2[3][10] = { {"A0"}, {"D0"}, {"D1"} };
    char MQTTselectNode[MAX_UNITS][5] = {
                                        "0x1", "0x2", "0x3", "0x4", "0x5", "0x6", "0x7",
                                        "0x8", "0x9", "0xA", "0xB", "0xC", "0xD", "0xE", "0xF" ,"0x10", "0x11",
                                        "0x12", "0x13", "0x14", "0x15", "0x16", "0x17", "0x18", "0x19",
                                        "0x1A", "0x1B", "0x1C", "0x1D", "0x1E", "0x1F", "0x20"
                                    };

    char MQTTdeselectNode[MAX_UNITS][5] = {   
                                        "0x81", "0x82", "0x83", "0x84", "0x85", "0x86", "0x87",
                                        "0x88", "0x89", "0x8A", "0x8B", "0x8C", "0x8D", "0x8E", "0x8F",
                                        "0x90", "0x91", "0x92", "0x93", "0x94", "0x95", "0x96", "0x97",
                                        "0x98", "0x99", "0x9A", "0x9B", "0x9C", "0x9D", "0x9E", "0x9F", "0xA0"
                                    };
    
    char MQTTconsultCommands[8][5] = { "0xC0", "0xC1", "0xC2", "0xC3", "0xC4", "0xC5", "0xC6", "0xC7" };
    unsigned char monitoringArray[] = { 0xC3, 0xC5, 0xC1 };
    unsigned char consultCommands[] = { 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7 };
    unsigned char selectNode[MAX_UNITS] = {
                                        0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,
                                        0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF ,0x10, 0x11,
                                        0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
                                        0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20
                                    };
    unsigned char deselectNode[MAX_UNITS] = {   
                                        0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
                                        0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
                                        0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
                                        0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0
                                    };
    // Menus
    char vetor_menu01[SIZE_MENU_1][30];
    char vetor_menu02[SIZE_MENU_2][30] = {
                                            {"Turn on LED"},
                                            {"Query A0"},
                                            {"Monitoring A0"},
                                            {"Query D0"},
                                            {"Monitoring D0"},
                                            {"Query D1"},
                                            {"Monitoring D1"},
                                            {"Monitoring all"},
                                            {"Turn Back"}
                                        };

    // Inicializar biblioteca
    if (wiringPiSetup () == -1)
    {
        fprintf (stdout, "Unable to start wiringPi: %s\n", strerror (errno)) ;
        return 1;
    }

    // Setar bot√µes como entrada
    pinMode(BUTTON_DOWN, INPUT);
    pinMode(BUTTON_UP, INPUT);
    pinMode(BUTTON_ENTER, INPUT);
    

    // Configurar UART
    if ((uartfd = serialOpen (UART_3, BAUD_RATE)) < 0){
        fprintf (stderr, "Unable to open serial device: %s\n", strerror (errno)) ;
        exit(EXIT_FAILURE);
    }

    // Iniciar LCD
    if ((lcdfd = lcdInit (2, 16, 4, LCD_RS, LCD_E, LCD_D4, LCD_D5, LCD_D6, LCD_D7, 0, 0, 0, 0) > 0))
    {
        printf("Unable to init LCD");
        exit(EXIT_FAILURE);
    }

    serialFlush(uartfd);
    // DESCOBRINDO UNIDADES UART ONLINES
    for(int i = 0; i < MAX_UNITS; i++) {
        recvData = reachUnit(uartfd, vetor_menu01[i], selectNode, deselectNode, i);
        if(recvData > 0) {
            availableUnits++;
        }else{
            selectNode[i] = -1;
            deselectNode[i] = -1;
            vetor_menu01[i][0] = '\0';
        }
    }
    int cont = 0;
    int cont2 = 0;
    int cont3 = 0;
    for (int i = 0; i < MAX_UNITS; i++){
        if(selectNode[i] < 255){
            selectNode[cont] = selectNode[i];
            cont++;
        }
        if(deselectNode[i] < 255){
            deselectNode[cont2] = deselectNode[i];
            cont2++;
        }
        if(vetor_menu01[i][0] != '\0'){
            strcpy(vetor_menu01[cont3], vetor_menu01[i]);
            cont3++;
        }
    }
    cont = 0;
    cont2 = 0;
    cont3 = 0;
    // Descobrindo unidades MQTT online
    for(int i = 0; i < MAX_UNITS; i++) {
        recvData = reachMQTTUnits(&pubmsg, &client, &token, MQTTselectNode[i], MQTTdeselectNode[i], vetor_menu01[i], i);
        delay(10);
        if(MQTT_RECVD && MQTT_RECVD_COUNTER == 2) {
            availableUnits++;
            printf("[%d] UNIDADE MQTT DESCOBERTA | recvData -> [%d]\n", i, recvData);
            MQTT_RECVD = FALSE;
            MQTT_RECVD_COUNTER = 0;
        }else{
            selectNode[i] = -1;
            deselectNode[i] = -1;
            vetor_menu01[i][0] = '\0';
        }
    }

    for (int i = 0; i < MAX_UNITS; i++){
        if(selectNode[i] < 255){
            selectNode[cont] = selectNode[i];
            cont++;
        }
        if(deselectNode[i] < 255){
            deselectNode[cont2] = deselectNode[i];
            cont2++;
        }
        if(vetor_menu01[i][0] != '\0'){
            strcpy(vetor_menu01[cont3], vetor_menu01[i]);
            cont3++;
        }
    }



    printf("AVAILABLE UNITS -> [%d]\n", availableUnits);

    sprintf(vetor_menu01[availableUnits], "Monitor All");
    availableUnits++;
    sprintf(vetor_menu01[availableUnits], "Exit");

    lcdddPuts(lcdfd, 0, "%s", vetor_menu01[index]);
    while(TRUE){
        // Verificar se algum bot√£o foi pressionado
        buttonDownState = digitalRead(BUTTON_DOWN);
        buttonUpState = digitalRead(BUTTON_UP);
        buttonEnterState = digitalRead(BUTTON_ENTER);
        
        // Delay de "debouncing"
        delay(200);
        
        if (!buttonDownState) {
            // O bot√£o foi pressionado
            index++;
            
            // Verificar se o que vai ser mostrado √© o menu 1 ou 2
            if (meun1Active) {
                // Se posi√ß√£o passar da quantidade de itens do menu, levar para a posi√ß√£o zero do menu
                refreshPos(&index, availableUnits + 1);
                lcdddPuts(lcdfd, 0, "%s", vetor_menu01[index]);
            
            }else if (menu2Active) {
                // Se posi√ß√£o passar da quantidade de itens do menu, levar para a posi√ß√£o zero do menu
                refreshPos(&index, SIZE_MENU_2);
                lcdddPuts(lcdfd, 0, "%s", vetor_menu02[index]);
            }
        
        }
        else if (!buttonUpState) {
            // O bot√£o foi pressionado
            index--;

            // Verificar se o que vai ser mostrado √© o menu 1 ou 2
            if (meun1Active) {
                // Se posi√ß√£o for menor que a quantidade de itens do menu, levar para a posi√ß√£o 32 do menu
                refreshPos(&index, availableUnits + 1);
                lcdddPuts(lcdfd, 0, "%s", vetor_menu01[index]);
            
            }else if (menu2Active) {
                // Se posi√ß√£o for menor que a quantidade de itens do menu, levar para a posi√ß√£o 6 do menu
                refreshPos(&index, SIZE_MENU_2);
                lcdddPuts(lcdfd, 0, "%s", vetor_menu02[index]);
            }
        
        }
        else if (!buttonEnterState) {
            // O bot√£o foi pressionado
            if (meun1Active) {
                // Verificar se apertou enter na posi√ß√£o Sair
                choiceMenu1 = index;
                if (choiceMenu1 == EXIT) {
                    lcdddPuts(lcdfd, 0, ":[");
                    break;

                }else if (choiceMenu1 == availableUnits - 1){ // Monitorar tudo em todas as nodes
                    printf("VOCE DECIDIU MONITORAR TODAS AS UNIDADES\n");
                    while(digitalRead(BUTTON_DOWN)) {
                        idxMonitoring = 0;
                        printf("%d", availableUnits);
                        for (int i = 0; i < availableUnits - 1; i++){
                            lcdddPuts(lcdfd, TWO_SECONDS, "Selecting Unit %u", selectNode[i]);
                            sendData(uartfd, selectNode, i);
                            recvData = recvDigitalData(uartfd);
                            lcdddPuts(lcdfd, TWO_SECONDS, "Node %u selected", selectNode[i]);
                            // Verificar estado dos Pinos
                            idxMonitoring = 0;
                            while(digitalRead(BUTTON_DOWN) && idxMonitoring < 3) {
                                //serialFlush(uartfd);
								printf("LACO DE DENTRO\n");
                                recvData = recvDigitalData(uartfd);
                                lcdClear(lcdfd);
                                sendData(uartfd, monitoringArray, idxMonitoring);
                                if(idxMonitoring == 2) recvData = recvAnalogData(uartfd);
                                else recvData = recvDigitalData(uartfd);
                                printf("IDX -> %d\n", idxMonitoring);
                                lcdPrintf(lcdfd, "Value %s: %d", monitoringLabels[idxMonitoring], recvData);
                                lcdPosition(lcdfd, 0, 1);
                                lcdPuts(lcdfd, "<ENTER TO EXIT>");
                                delay(1000);
                                idxMonitoring++;
								printf("IDXMONITORING -> %d\n", idxMonitoring);
                            }
                            // Tirar sele√ß√£o da node
                            sendData(uartfd, deselectNode, i);
                            recvData = recvDigitalData(uartfd);
                            printf("DESELECT RECV DATA -> %d\n", recvData);
                        }
                    }
                    while(!digitalRead(BUTTON_DOWN));
                    lcdddPuts(lcdfd, 0, "%s", vetor_menu01[index]);
                    continue;
                }
                else {
                    lcdddPuts(lcdfd, TWO_SECONDS, "Selecting Unit %u", selectNode[index]);
                    // Seleciona a Node com o ID escolhido
                    sendData(uartfd, selectNode, index);
                    // Salva a index da node selecionada no vetor de ID das Nodes
                    recvData = recvDigitalData(uartfd);
                    if(recvData > -1) {
                        printf("SELECT RECV DATA -> %d\n", recvData);
                        selectedNode = index;
                        // Desabilita menu 1
                        meun1Active = FALSE;
                        // Habilita menu 2
                        menu2Active = TRUE;
                        // Reseta o contador de posicoes
                        index = 0;
                        lcdddPuts(lcdfd, TWO_SECONDS, "Success on selecting the unit");
                        lcdddPuts(lcdfd, 0, "%s", vetor_menu02[index]);
                    }
                    else {
                        lcdddPuts(lcdfd, TWO_SECONDS, "Unreachable Unit");
                        lcdddPuts(lcdfd, 0, "%s", vetor_menu01[index]);
                    }
                }

            }else if (menu2Active) {
                choiceMenu2 = index;
                // Verificar se apertou enter na posi√ß√£o Voltar
                if (choiceMenu2 == TURN_BACK) {
                    // Desseleciona a Node previamente selecionada
                    lcdddPuts(lcdfd, TWO_SECONDS, "Deselecting the unit %u", selectNode[selectedNode]);
                    sendData(uartfd, deselectNode, selectedNode);
                    recvData = recvDigitalData(uartfd);
                    printf("DESELECT RECV DATA -> %d\n", recvData);
                    meun1Active = TRUE;
                    menu2Active = FALSE;
                    index = choiceMenu1;
                    lcdddPuts(lcdfd, TWO_SECONDS, "Unit successfully deselected");
                    lcdddPuts(lcdfd, 0, "%s", vetor_menu01[index]);

                }else{
                     if(MONITORING_ALL) {
                         idxMonitoring = 0;
                         printf("VOCE DECIDIU MONITORAR TODOS OS SENSORES\n");
                         while(digitalRead(BUTTON_DOWN)) {
                             lcdClear(lcdfd);
                             sendData(uartfd, monitoringArray, idxMonitoring);
                             if(idxMonitoring == 2) recvData = recvAnalogData(uartfd);
                             else recvData = recvDigitalData(uartfd);
                             printf("IDX -> %d\n", idxMonitoring);
                             idxMonitoring == 2 ? (idxMonitoring = 0) : idxMonitoring++; 
                             lcdPrintf(lcdfd, "Value %s: %d", monitoringLabels2[idxMonitoring], recvData);
                             lcdPosition(lcdfd, 0, 1);
                             lcdPuts(lcdfd, "<ENTER TO EXIT>");
                             delay(1000);
                         }
                         while(!digitalRead(BUTTON_DOWN));
                         lcdddPuts(lcdfd, 0, "%s", vetor_menu02[index]);
                    }
                   if(index == 0) {
                        lcdddPuts(lcdfd, TWO_SECONDS, "Turning on LED");
                        sendData(uartfd, consultCommands, index);
                        // Verificacao da resposta da UNIDADE
                        continue;
                    }
                    // Opcao de monitorar sensor
                   if(MONITORING) {
                        printf("VOCE ESCOLHEU MONITORAR\n");
                        while(digitalRead(BUTTON_DOWN)) {
                            lcdClear(lcdfd);
                            sendData(uartfd, consultCommands, index - 1);
                            if(MONITORING_ANALOG) recvData = recvAnalogData(uartfd);
                            else recvData = recvDigitalData(uartfd);
                            lcdPrintf(lcdfd, "Value: %d", recvData);
                            lcdPosition(lcdfd, 0, 1);
                            lcdPuts(lcdfd, "<ENTER TO EXIT>");
                            delay(500);
                        }
                        while(!digitalRead(BUTTON_DOWN));
                        lcdddPuts(lcdfd, 0, "%s", vetor_menu02[index]);
                    }
                    else if(CONSULT) {
                        // Mandar mensagem para a node e pegar o dado para exibir no LCD
                        lcdddPuts(lcdfd, TWO_SECONDS, "Sending Command...");
                        // Enviando comando a Node selecionada
                        sendData(uartfd, consultCommands, index);
                        lcdddPuts(lcdfd, TWO_SECONDS, "Successfully Sent");
                        if(ANALOG_PIN) { 
                            recvData = recvAnalogData(uartfd);
                        }
                        else recvData = recvDigitalData(uartfd);
                        if(recvData > -1) {
                            lcdClear(lcdfd);
                            lcdPrintf(lcdfd, "Sensor Val.: %d", recvData);
                            delay(TWO_SECONDS);
                        }
                        else { 
                            lcdddPuts(lcdfd, TWO_SECONDS, "Unreachable Unit");
                        }
                        lcdddPuts(lcdfd, TWO_SECONDS, "%s", vetor_menu02[index]);
                    }
                }   
            }
        }
    }
    if((rc = MQTTClient_unsubscribe(client, TOPIC)) != MQTTCLIENT_SUCCESS) {
        printf("Failed to unsubscribe, return code %d\n", rc);
        exit(EXIT_FAILURE);
    }
    if ((rc = MQTTClient_disconnect(client, 10000)) != MQTTCLIENT_SUCCESS) {
        printf("Failed to disconnect, return code %d\n", rc);
        exit(EXIT_FAILURE);
    }
    MQTTClient_destroy(&client);
    return EXIT_SUCCESS;
}
